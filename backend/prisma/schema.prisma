generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int        @id @default(autoincrement())
  username     String     @unique
  email        String     @unique
  passwordHash String     @map("password_hash")
  systemRole   SystemRole @default(EMPLOYEE) @map("system_role")
  createdAt    DateTime   @default(now()) @map("created_at")
  lastLogin    DateTime?  @map("last_login")
  employee     Employee?

  @@map("users")
}

model Employee {
  id              Int               @id @default(autoincrement())
  userId          Int               @unique @map("user_id")
  name            String
  contact         String
  availability    AvailabilityStatus @default(AVAILABLE)
  maxTasks        Int               @default(5) @map("max_tasks")
  currentWorkload Float             @default(0) @map("current_workload")
  
  // Relations
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills          EmployeeSkill[]
  createdProjects Project[]         @relation("ProjectCreator")
  projectMembers  ProjectEmployee[]
  assignedTasks   Task[]

  @@map("employees")
}

model Skill {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  employeeSkills EmployeeSkill[]

  @@map("skills")
}

model EmployeeSkill {
  employeeId      Int              @map("employee_id")
  skillId         Int              @map("skill_id")
  proficiency     ProficiencyLevel
  yearsExperience Int              @map("years_experience")
  employee        Employee         @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  skill           Skill            @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([employeeId, skillId])
  @@map("employee_skills")
}

model Project {
  id          Int               @id @default(autoincrement())
  createdBy   Int               @map("created_by")
  title       String
  description String
  priority    Priority
  startDate   DateTime          @map("start_date")
  deadline    DateTime
  status      ProjectStatus     @default(PLANNING)
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  milestones  Milestone[]
  members     ProjectEmployee[]
  creator     Employee          @relation("ProjectCreator", fields: [createdBy], references: [id])
  tasks       Task[]

  @@map("projects")
}

model ProjectEmployee {
  projectId  Int      @map("project_id")
  employeeId Int      @map("employee_id")
  joinedAt   DateTime @default(now()) @map("joined_at")
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([projectId, employeeId])
  @@map("project_employees")
}

model Task {
  id              Int        @id @default(autoincrement())
  projectId       Int        @map("project_id")
  employeeId      Int?       @map("employee_id")
  title           String
  description     String?
  status          TaskStatus @default(TODO)
  priority        Priority   @default(MEDIUM)
  estimatedHours  Float?     @map("estimated_hours")
  actualHours     Float?     @map("actual_hours")
  startDate       DateTime?  @map("start_date")
  endDate         DateTime?  @map("end_date")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  
  // Relations
  assignedTo      Employee?  @relation(fields: [employeeId], references: [id])
  project         Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Milestone {
  id        Int      @id @default(autoincrement())
  projectId Int      @map("project_id")
  title     String
  dueDate   DateTime @map("due_date")
  completed Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("milestones")
}

enum SystemRole {
  ADMIN
  EMPLOYEE

  @@map("system_role")
}

enum ProficiencyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT

  @@map("proficiency_level")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL

  @@map("priority")
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED

  @@map("project_status")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  BLOCKED

  @@map("task_status")
}

enum AvailabilityStatus {
  AVAILABLE
  BUSY
  OVERLOADED
  ON_LEAVE

  @@map("availability_status")
}
